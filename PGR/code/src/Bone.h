//----------------------------------------------------------------------------------------
/**
 * \file    Bone.h
 * \author  Veronika Shirochenkova
 * \date    2022
 * \brief   Bone class, array of bone vertices/indices, bone is "hardcore, min s 30 triangles"
 */
 //----------------------------------------------------------------------------------------

#ifndef BONE_H
#define BONE_H

#include <glm/glm/glm.hpp>

const float boneVertices[] = {
  0.0210451f,-0.000805594f,1.83648e-07f,0.999969f,0.0f,0.0f,0.486135f,0.100998f,
  0.0212984f,-0.000858821f,-0.2983f,0.999969f,-0.001892f,-0.004913f,0.486148f,0.180991f,
  0.0183453f,0.0186232f,-0.298304f,0.729698f,0.660329f,0.177404f,0.480137f,0.179888f,
  0.0181271f,0.0184601f,-3.25407e-06f,0.744194f,0.667928f,-9.2e-05f,0.482064f,0.100998f,
  -3.72498e-09f,0.0232505f,-4.15184e-06f,0.0f,0.999969f,-0.000153f,0.477344f,0.100998f,
  3.74226e-08f,0.0234671f,-0.298305f,0.0f,0.976714f,0.214484f,0.475118f,0.179189f,
  -0.0183453f,0.0186232f,-0.298304f,-0.729698f,0.660329f,0.177404f,0.470388f,0.178696f,
  -0.0181271f,0.0184601f,-3.25681e-06f,-0.744194f,0.667928f,-9.2e-05f,0.472648f,0.100998f,
  -0.0210451f,-0.000805594f,1.8047e-07f,-1.0f,0.0f,0.0f,0.504674f,0.100998f,
  -0.0212984f,-0.000858821f,-0.2983f,-0.999969f,-0.001892f,-0.004913f,0.506514f,0.177591f,
  -0.0183453f,-0.020341f,-0.298297f,-0.728538f,-0.667592f,0.153356f,0.501846f,0.178556f,
  -0.0181271f,-0.0200715f,3.67736e-06f,-0.744194f,-0.667928f,9.2e-05f,0.499657f,0.100998f,
  -3.72562e-09f,-0.0248619f,4.34276e-06f,0.0f,-1.0f,0.000153f,0.494943f,0.100998f,
  3.74219e-08f,-0.0251848f,-0.298296f,0.0f,-0.983154f,0.182714f,0.497118f,0.179042f,
  0.0183453f,-0.020341f,-0.298297f,0.728538f,-0.667592f,0.153356f,0.492123f,0.179763f,
  0.0181271f,-0.0200715f,3.68009e-06f,0.744194f,-0.667928f,9.2e-05f,0.490206f,0.100998f,
  -0.0212985f,-0.000752456f,0.298301f,-0.999969f,-0.001892f,0.004913f,0.506514f,0.024405f,
  -0.0183454f,-0.0202345f,0.298304f,-0.728538f,-0.667653f,-0.153111f,0.501846f,0.02344f,
  -0.0180901f,-0.0416547f,0.355144f,-0.62273f,-0.669668f,0.404553f,0.502166f,0.00973f,
  -0.0298016f,-0.0197093f,0.35514f,-0.839137f,0.25071f,0.48265f,0.507045f,0.011236f,
  -4.85984e-08f,-0.0250785f,0.298305f,0.0f,-0.983215f,-0.182348f,0.497118f,0.022954f,
  0.0183453f,-0.0202345f,0.298304f,0.728538f,-0.667653f,-0.153111f,0.492123f,0.022233f,
  0.01809f,-0.0416547f,0.355144f,0.62273f,-0.669668f,0.404553f,0.496144f,0.011588f,
  -6.07758e-08f,-0.0480008f,0.360914f,0.0f,-0.811823f,0.58388f,0.498342f,0.010866f,
  -0.0298015f,-0.019836f,-0.355133f,-0.839137f,0.250526f,-0.482711f,0.507045f,0.19076f,
  -0.01809f,-0.0417814f,-0.355129f,-0.62273f,-0.66982f,-0.404309f,0.502166f,0.192267f,
  0.0298016f,0.0214557f,-0.353136f,0.846095f,-0.222022f,-0.484542f,0.478333f,0.19054f,
  0.0180901f,0.0434011f,-0.35314f,0.622974f,0.683248f,-0.38084f,0.47616f,0.1903f,
  0.0212984f,-0.000752456f,0.298301f,0.999969f,-0.001892f,0.004913f,0.486148f,0.021005f,
  0.0183453f,0.0187296f,0.298297f,0.729698f,0.660268f,-0.177618f,0.480137f,0.022108f,
  0.01809f,0.0435272f,0.353124f,0.622974f,0.68337f,0.380596f,0.47616f,0.011697f,
  0.0298014f,0.0215818f,0.353128f,0.846095f,-0.22187f,0.484603f,0.478333f,0.011456f,
  4.21481e-08f,-0.0481296f,-0.360897f,0.0f,-0.812006f,-0.583605f,0.498342f,0.191131f,
  0.0180901f,-0.0417814f,-0.355129f,0.62273f,-0.66982f,-0.404309f,0.496144f,0.190409f,
  4.57209e-08f,0.0497473f,-0.358877f,0.0f,0.825465f,-0.56444f,0.474062f,0.191038f,
  -0.01809f,0.0434011f,-0.35314f,-0.622974f,0.683248f,-0.38084f,0.470341f,0.192195f,
  -4.85978e-08f,0.0235735f,0.298297f,0.0f,0.976623f,-0.21482f,0.475118f,0.022807f,
  -5.68954e-08f,0.0498754f,0.358859f,0.0f,0.825648f,0.564135f,0.474062f,0.010958f,
  -0.0183454f,0.0187296f,0.298297f,-0.729698f,0.660268f,-0.177618f,0.470388f,0.0233f,
  -0.0210451f,-0.000805594f,1.8047e-07f,-1.0f,0.0f,0.0f,0.467628f,0.100998f,
  -0.0212985f,-0.000752456f,0.298301f,-0.999969f,-0.001892f,0.004913f,0.465758f,0.024369f,
  -0.0212984f,-0.000858821f,-0.2983f,-0.999969f,-0.001892f,-0.004913f,0.465758f,0.177627f,
  -5.705e-08f,-0.00702735f,0.360906f,0.0f,0.670736f,0.741661f,0.494088f,0.005366f,
  -0.0298016f,-0.0197093f,0.35514f,-0.839137f,0.25071f,0.48265f,0.501608f,0.003973f,
  4.58739e-08f,-0.00715603f,-0.360904f,0.0f,0.670492f,-0.741905f,0.494088f,0.196631f,
  0.0298016f,-0.019836f,-0.355133f,0.839137f,0.250526f,-0.482711f,0.493883f,0.190743f,
  -0.0298015f,-0.019836f,-0.355133f,-0.839137f,0.250526f,-0.482711f,0.501608f,0.198023f,
  0.0298014f,-0.0197093f,0.35514f,0.839137f,0.25071f,0.48265f,0.493883f,0.011253f,
  4.22936e-08f,-0.000861466f,-0.313481f,0.0f,0.056642f,-0.998383f,0.51175f,0.179835f,
  4.58739e-08f,-0.00715603f,-0.360904f,0.0f,0.670492f,-0.741905f,0.514166f,0.18997f,
  -4.97442e-08f,-0.000749573f,0.313481f,0.0f,0.056978f,0.998352f,0.486125f,0.012636f,
  4.22936e-08f,-0.000861466f,-0.313481f,0.0f,0.056642f,-0.998383f,0.486125f,0.18936f,
  -4.97442e-08f,-0.000749573f,0.313481f,0.0f,0.056978f,0.998352f,0.51175f,0.022161f,
  -5.705e-08f,-0.00702735f,0.360906f,0.0f,0.670736f,0.741661f,0.514166f,0.012027f,
  4.57203e-08f,0.00877396f,-0.358869f,0.0f,-0.645466f,-0.763756f,0.478314f,0.196271f,
  -0.0298015f,0.0214557f,-0.353136f,-0.846095f,-0.222022f,-0.484542f,0.471012f,0.197795f,
  -5.6896e-08f,0.00890196f,0.358866f,0.0f,-0.645192f,0.764f,0.478313f,0.005725f,
  -0.0180901f,0.0435272f,0.353124f,-0.622974f,0.68337f,0.380596f,0.470341f,0.009802f,
  -0.0298016f,0.0215818f,0.353128f,-0.846095f,-0.22187f,0.484603f,0.471012f,0.004201f,
  4.22936e-08f,-0.000861466f,-0.313481f,0.0f,0.056642f,-0.998383f,0.460589f,0.17993f,
  -0.0298015f,0.0214557f,-0.353136f,-0.846095f,-0.222022f,-0.484542f,0.465625f,0.190569f,
  4.57203e-08f,0.00877396f,-0.358869f,0.0f,-0.645466f,-0.763756f,0.458553f,0.189763f,
  -0.0298016f,0.0215818f,0.353128f,-0.846095f,-0.22187f,0.484603f,0.465625f,0.011427f,
  -4.97442e-08f,-0.000749573f,0.313481f,0.0f,0.056978f,0.998352f,0.460588f,0.022066f,
  -5.6896e-08f,0.00890196f,0.358866f,0.0f,-0.645192f,0.764f,0.458553f,0.012234f,
};

const unsigned int boneIndices[] = {
  0, 1, 2,
  0, 2, 3,
  4, 5, 6,
  4, 6, 7,
  8, 9, 10,
  8, 10, 11,
  12, 13, 14,
  12, 14, 15,
  16, 17, 18,
  16, 18, 19,
  20, 21, 22,
  20, 22, 23,
  10, 9, 24,
  10, 24, 25,
  2, 1, 26,
  2, 26, 27,
  28, 29, 30,
  28, 30, 31,
  14, 13, 32,
  14, 32, 33,
  6, 5, 34,
  6, 34, 35,
  29, 36, 37,
  29, 37, 30,
  20, 12, 15,
  20, 15, 21,
  17, 11, 12,
  17, 12, 20,
  11, 10, 13,
  11, 13, 12,
  16, 8, 11,
  16, 11, 17,
  38, 7, 39,
  38, 39, 40,
  7, 6, 41,
  7, 41, 39,
  36, 4, 7,
  36, 7, 38,
  29, 3, 4,
  29, 4, 36,
  3, 2, 5,
  3, 5, 4,
  28, 0, 3,
  28, 3, 29,
  21, 15, 0,
  21, 0, 28,
  15, 14, 1,
  15, 1, 0,
  42, 43, 18,
  42, 18, 23,
  44, 45, 33,
  44, 33, 32,
  46, 44, 32,
  46, 32, 25,
  47, 42, 23,
  47, 23, 22,
  9, 48, 49,
  9, 49, 24,
  13, 10, 25,
  13, 25, 32,
  28, 50, 42,
  28, 42, 47,
  51, 1, 45,
  51, 45, 44,
  17, 20, 23,
  17, 23, 18,
  21, 28, 47,
  21, 47, 22,
  52, 16, 19,
  52, 19, 53,
  1, 14, 33,
  1, 33, 45,
  35, 34, 54,
  35, 54, 55,
  34, 27, 26,
  34, 26, 54,
  30, 37, 56,
  30, 56, 31,
  37, 57, 58,
  37, 58, 56,
  59, 41, 60,
  59, 60, 61,
  36, 38, 57,
  36, 57, 37,
  50, 28, 31,
  50, 31, 56,
  41, 6, 35,
  41, 35, 60,
  1, 51, 54,
  1, 54, 26,
  5, 2, 27,
  5, 27, 34,
  38, 40, 62,
  38, 62, 57,
  40, 63, 64,
  40, 64, 62,
};


class Bone
{
    public:
        // current position
        float xPos;
        float yPos;
        float zPos;

        // start position
        float xStart;
        float zStart;

        // rotation 
        float angle;
        float radius;
        unsigned int animationTime;
        float selfRotation;
        float speed;

        // buffers
        unsigned int VAO;
        unsigned int VBO;
        unsigned int EBO;

        /* Constructor */
        Bone(glm::vec3 bone_position, const float s) 
        {       
            xPos = bone_position.x;
            yPos = bone_position.y;
            zPos = bone_position.z;

            xStart = bone_position.x;
            zStart = bone_position.z;

            angle = 0.0f;
            radius = 0.22f;
            selfRotation = 0.0f;

            animationTime = 0;
            speed = s;
        }

        /* generate/bind buffers */
        void create() 
        {
            glGenVertexArrays(1, &VAO);
            glGenBuffers(1, &VBO);
            glGenBuffers(1, &EBO);

            glBindVertexArray(VAO);

            glBindBuffer(GL_ARRAY_BUFFER, VBO);
            glBufferData(GL_ARRAY_BUFFER, sizeof(boneVertices), boneVertices, GL_STATIC_DRAW);

            glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
            glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(boneIndices), boneIndices, GL_STATIC_DRAW);

            glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
            glEnableVertexAttribArray(0);

            glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
            glEnableVertexAttribArray(1);

            glBindBuffer(GL_ARRAY_BUFFER, 0);
            glBindVertexArray(0);
        }

        /* calculate position depending on the time */ 
        void animation() 
        {
            selfRotation += 0.30f;
            animationTime++;

            if (animationTime == 2) {
                if (angle >= 360.0f) {
                    angle = 0.0f;
                }
                xPos = radius * cos(angle) + xStart;
                zPos = radius * sin(angle) + zStart;

                angle += speed;
                animationTime = 0;
            }
        }

};
#endif
